import 'package:bloc/bloc.dart';
import 'package:climora/core/core.dart';
import 'package:climora/domain/entities/favorite.dart';
import 'package:climora/domain/entities/geocoding.dart';
import 'package:climora/domain/repositories/favorites_repository.dart';
import 'package:equatable/equatable.dart';

part 'favorites_state.dart';

class FavoritesCubit extends Cubit<FavoritesState> {
  FavoritesCubit({required this.repository}) : super(FavoritesState.initial());

  final FavoritesRepository repository;

  Future<void> init() async {
    emit(state.copyWith(status: FavoritesStatus.loading));
    final (failure, response) = await repository.getFavorites();

    if (failure != null) {
      emit(
        state.copyWith(
          failure: failure,
          status: FavoritesStatus.failure,
        ),
      );
      return;
    }

    emit(
      state.copyWith(
        favorites: response ?? [],
        status: FavoritesStatus.success,
      ),
    );
  }

  Future<void> removeFavorite(int id) async {
    emit(state.copyWith(status: FavoritesStatus.loading));

    final (failure, response) = await repository.removeFavorite(id);

    if (failure != null) {
      emit(
        state.copyWith(
          failure: failure,
          status: FavoritesStatus.failure,
        ),
      );
      return;
    }

    emit(
      state.copyWith(
        favorites: state.favorites
            .where((element) => element.id != id)
            .toList(),
        status: FavoritesStatus.success,
      ),
    );
  }

  Future<void> addFavorite(GeocodingLocation location) async {
    emit(state.copyWith(status: FavoritesStatus.loading));

    final favorite = Favorite(
      location: location,
      id: 0, // Will be auto-generated by database
      date: DateTime.now(),
    );

    final (failure, response) = await repository.addFavorite(favorite);

    if (failure != null) {
      emit(
        state.copyWith(
          failure: failure,
          status: FavoritesStatus.failure,
        ),
      );
      return;
    }

    // Reload favorites to get the correct IDs from database
    await init();
  }
}
